# github repository actions 페이지에 나타날 이름
name: CI/CD using Github Actions & AWS CodeDeploy

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # JDK setting - github actions에서 사용할 JDK 설정
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: docker login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: mysql container start
        run: docker run --name mysql-container
          -e MYSQL_ROOT_PASSWORD=${{secrets.DATABASE_PASSWORD}}
          -e MYSQL_DATABASE=${{secrets.DATABASE_NAME}}
          -p 3306:3306 -d mysql:8.0

      - name: Sleep for 10 seconds
        run: sleep 10

      - name: docker ps
        run: docker ps
        shell: bash

      - name: Check MySQL container logs
        run: docker logs mysql-container
        shell: bash

      # get gradlew permission
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: FIRE_BASE_ADMIN_JSON
        run: pwd && 
          touch ./src/main/resources/raceon-firebase-admin.json &&
          echo '${{secrets.FIRE_BASE_ADMIN_JSON}}' >> ./src/main/resources/raceon-firebase-admin.json

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure Env File
        run: touch ./envfile &&
          echo "export DATABASE_NAME=${{secrets.DEV_DATABASE_NAME}}" >> ./envfile &&
          echo "export DATABASE_URL=${{secrets.DEV_DATABASE_URL}}" >> ./envfile &&
          echo "export DATABASE_USER_ID=${{secrets.DEV_DATABASE_USER_ID}}" >> ./envfile &&
          echo "export DATABASE_PASSWORD=${{secrets.DEV_DATABASE_PASSWORD}}" >> ./envfile &&
          echo "export DATABASE_PORT=${{secrets.DEV_DATABASE_PORT}}" >> ./envfile &&
          echo "export AWS_ACCESS_KEY=${{secrets.DEV_AWS_ACCESS_KEY}}" >> ./envfile &&
          echo "export AWS_SECRET_KEY=${{secrets.DEV_AWS_SECRET_KEY}}" >> ./envfile &&
          echo "export JWT_KEY=${{secrets.DEV_JWT_KEY}}" >> ./envfile &&
          echo "export GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}}" >> ./envfile &&
          echo "export GOOGLE_CLIENT_SECRET=${{secrets.GOOGLE_CLIENT_SECRET}}" >> ./envfile &&
          echo "export GOOGLE_OAUTH_REDIRECT_URI=${{secrets.GOOGLE_OAUTH_REDIRECT_URI}}" >> ./envfile &&
          echo "export GOOGLE_TOKEN_REQUEST_URI=${{secrets.GOOGLE_TOKEN_REQUEST_URI}}" >> ./envfile &&
          echo "export GOOGLE_USER_INFO_REQUEST_URI=${{secrets.GOOGLE_USER_INFO_REQUEST_URI}}" >> ./envfile &&
          echo "export KAKAO_CLIENT_ID=${{secrets.KAKAO_CLIENT_ID}}" >> ./envfile &&
          echo "export KAKAO_OAUTH_REDIRECT_URI=${{secrets.KAKAO_OAUTH_REDIRECT_URI}}" >> ./envfile &&
          echo "export KAKAO_TOKEN_REQUEST_URI=${{secrets.KAKAO_TOKEN_REQUEST_URI}}" >> ./envfile &&
          echo "export KAKAO_USER_INFO_REQUEST_URI=${{secrets.KAKAO_USER_INFO_REQUEST_URI}}" >> ./envfile &&
          echo "export APPLE_REDIRECT_URI=${{secrets.APPLE_REDIRECT_URI}}" >> ./envfile &&
          echo "export APPLE_TOKEN_REQUEST_URI=${{secrets.APPLE_TOKEN_REQUEST_URI}}" >> ./envfile &&
          echo "export APPLE_CLIENT_ID=${{secrets.APPLE_CLIENT_ID}}" >> ./envfile &&
          echo "export APPLE_TEAM_ID=${{secrets.APPLE_TEAM_ID}}" >> ./envfile &&
          echo "export APPLE_KEY_ID=${{secrets.APPLE_KEY_ID}}" >> ./envfile &&
          echo "export APPLE_KEY_CONTENT=${{secrets.APPLE_KEY_CONTENT}}" >> ./envfile

      # make zip file
      - name: Make zip file
        run: zip -qq -r ./deploy-${{steps.current-time.outputs.formattedTime}}.zip ./build/libs/dippin-0.0.1-SNAPSHOT.jar ./scripts/* -j ./appspec.yml ./envfile
        shell: bash

      # AWS 사용자 정보 입력
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      # S3에 zip 파일 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./deploy-${{steps.current-time.outputs.formattedTime}}.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy/deploy-${{steps.current-time.outputs.formattedTime}}.zip --source .

      # CodeDeploy에 배포 요청
      - name: Code Deploy
        run: aws deploy create-deployment --application-name ${{ secrets.CODE_DEPLOY_APP_NAME }}
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }}
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=deploy/deploy-${{steps.current-time.outputs.formattedTime}}.zip


